[
    {
        "label": "MessagingApi",
        "importPath": "linebot.v3.messaging",
        "description": "linebot.v3.messaging",
        "isExtraImport": true,
        "detail": "linebot.v3.messaging",
        "documentation": {}
    },
    {
        "label": "PushMessageRequest",
        "importPath": "linebot.v3.messaging",
        "description": "linebot.v3.messaging",
        "isExtraImport": true,
        "detail": "linebot.v3.messaging",
        "documentation": {}
    },
    {
        "label": "TextMessage",
        "importPath": "linebot.v3.messaging",
        "description": "linebot.v3.messaging",
        "isExtraImport": true,
        "detail": "linebot.v3.messaging",
        "documentation": {}
    },
    {
        "label": "Configuration",
        "importPath": "linebot.v3.messaging",
        "description": "linebot.v3.messaging",
        "isExtraImport": true,
        "detail": "linebot.v3.messaging",
        "documentation": {}
    },
    {
        "label": "ApiClient",
        "importPath": "linebot.v3.messaging",
        "description": "linebot.v3.messaging",
        "isExtraImport": true,
        "detail": "linebot.v3.messaging",
        "documentation": {}
    },
    {
        "label": "LineBotApiError",
        "importPath": "linebot.exceptions",
        "description": "linebot.exceptions",
        "isExtraImport": true,
        "detail": "linebot.exceptions",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "async_playwright",
        "importPath": "playwright.async_api",
        "description": "playwright.async_api",
        "isExtraImport": true,
        "detail": "playwright.async_api",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "set_tag",
        "importPath": "run",
        "description": "run",
        "isExtraImport": true,
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "set_tag",
        "importPath": "run",
        "description": "run",
        "isExtraImport": true,
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "set_tag",
        "importPath": "run",
        "description": "run",
        "isExtraImport": true,
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "set_tag",
        "importPath": "run",
        "description": "run",
        "isExtraImport": true,
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "set_tag",
        "importPath": "run",
        "description": "run",
        "isExtraImport": true,
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "line_bot",
        "importPath": "line",
        "description": "line",
        "isExtraImport": true,
        "detail": "line",
        "documentation": {}
    },
    {
        "label": "line_bot",
        "importPath": "line",
        "description": "line",
        "isExtraImport": true,
        "detail": "line",
        "documentation": {}
    },
    {
        "label": "line_bot",
        "importPath": "line",
        "description": "line",
        "isExtraImport": true,
        "detail": "line",
        "documentation": {}
    },
    {
        "label": "line_bot",
        "importPath": "line",
        "description": "line",
        "isExtraImport": true,
        "detail": "line",
        "documentation": {}
    },
    {
        "label": "line_bot",
        "importPath": "line",
        "description": "line",
        "isExtraImport": true,
        "detail": "line",
        "documentation": {}
    },
    {
        "label": "get_playwright_browsers_path",
        "importPath": "playwright_path",
        "description": "playwright_path",
        "isExtraImport": true,
        "detail": "playwright_path",
        "documentation": {}
    },
    {
        "label": "get_playwright_browsers_path",
        "importPath": "playwright_path",
        "description": "playwright_path",
        "isExtraImport": true,
        "detail": "playwright_path",
        "documentation": {}
    },
    {
        "label": "get_playwright_browsers_path",
        "importPath": "playwright_path",
        "description": "playwright_path",
        "isExtraImport": true,
        "detail": "playwright_path",
        "documentation": {}
    },
    {
        "label": "get_playwright_browsers_path",
        "importPath": "playwright_path",
        "description": "playwright_path",
        "isExtraImport": true,
        "detail": "playwright_path",
        "documentation": {}
    },
    {
        "label": "get_playwright_browsers_path",
        "importPath": "playwright_path",
        "description": "playwright_path",
        "isExtraImport": true,
        "detail": "playwright_path",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "load_settings",
        "importPath": "settings",
        "description": "settings",
        "isExtraImport": true,
        "detail": "settings",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "line_bot",
        "kind": 2,
        "importPath": "line",
        "description": "line",
        "peekOfCode": "def line_bot(bed_type, date_value):\n    try:\n        with ApiClient(configuration) as api_client:\n            messaging_api = MessagingApi(api_client)\n            messaging_api.push_message(\n                PushMessageRequest(\n                    to=USER_ID,\n                    messages=[TextMessage(text=f\"予約いたしました。[予約取得した日付]: {date_value} [部屋名]: {bed_type}\")]\n                )\n            )",
        "detail": "line",
        "documentation": {}
    },
    {
        "label": "CHANNEL_ACCESS_TOKEN",
        "kind": 5,
        "importPath": "line",
        "description": "line",
        "peekOfCode": "CHANNEL_ACCESS_TOKEN = '6Tqs0gH5irqefUnJEPimcJbpJSvLwA/sKkdvo3UDocCxkQ8LDqyJy99CnBfcoRQA3j2pKVthvjtkD0vytUcLNYmqk1XYXEEKifTHopJu89YBrWTpBUwnhS2L6yex1h7ToJnIiQS5qC24H3jH5wdEXwdB04t89/1O/w1cDnyilFU='\nUSER_ID = \"U2b729a9c0f5b435b6e81807a21ba908f\"\nconfiguration = Configuration(access_token=CHANNEL_ACCESS_TOKEN)\ndef line_bot(bed_type, date_value):\n    try:\n        with ApiClient(configuration) as api_client:\n            messaging_api = MessagingApi(api_client)\n            messaging_api.push_message(\n                PushMessageRequest(\n                    to=USER_ID,",
        "detail": "line",
        "documentation": {}
    },
    {
        "label": "USER_ID",
        "kind": 5,
        "importPath": "line",
        "description": "line",
        "peekOfCode": "USER_ID = \"U2b729a9c0f5b435b6e81807a21ba908f\"\nconfiguration = Configuration(access_token=CHANNEL_ACCESS_TOKEN)\ndef line_bot(bed_type, date_value):\n    try:\n        with ApiClient(configuration) as api_client:\n            messaging_api = MessagingApi(api_client)\n            messaging_api.push_message(\n                PushMessageRequest(\n                    to=USER_ID,\n                    messages=[TextMessage(text=f\"予約いたしました。[予約取得した日付]: {date_value} [部屋名]: {bed_type}\")]",
        "detail": "line",
        "documentation": {}
    },
    {
        "label": "configuration",
        "kind": 5,
        "importPath": "line",
        "description": "line",
        "peekOfCode": "configuration = Configuration(access_token=CHANNEL_ACCESS_TOKEN)\ndef line_bot(bed_type, date_value):\n    try:\n        with ApiClient(configuration) as api_client:\n            messaging_api = MessagingApi(api_client)\n            messaging_api.push_message(\n                PushMessageRequest(\n                    to=USER_ID,\n                    messages=[TextMessage(text=f\"予約いたしました。[予約取得した日付]: {date_value} [部屋名]: {bed_type}\")]\n                )",
        "detail": "line",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "page",
        "description": "page",
        "peekOfCode": "def main(): \n    asyncio.run(run())\nif __name__ == \"__main__\":\n    main()",
        "detail": "page",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "page1",
        "description": "page1",
        "peekOfCode": "def main(): \n    asyncio.run(run())\nif __name__ == \"__main__\":\n    main()",
        "detail": "page1",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "page2",
        "description": "page2",
        "peekOfCode": "def main(): \n    asyncio.run(run())\nif __name__ == \"__main__\":\n    main()",
        "detail": "page2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "page3",
        "description": "page3",
        "peekOfCode": "def main(): \n    asyncio.run(run())\nif __name__ == \"__main__\":\n    main()",
        "detail": "page3",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "page4",
        "description": "page4",
        "peekOfCode": "def main(): \n    asyncio.run(run())\nif __name__ == \"__main__\":\n    main()",
        "detail": "page4",
        "documentation": {}
    },
    {
        "label": "get_playwright_browsers_path",
        "kind": 2,
        "importPath": "playwright_path",
        "description": "playwright_path",
        "peekOfCode": "def get_playwright_browsers_path():\n    # You can customize this path if needed\n    return os.path.join(os.getcwd(), \".playwright-browsers\")",
        "detail": "playwright_path",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def main():\n    scripts = [\n        \"python page.py\",\n        \"python page1.py\",\n        \"python page2.py\",\n        \"python page3.py\",\n        \"python page4.py\"\n    ]\n    processes = []\n    if(set_tag):",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "set_tag",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "set_tag = load_settings('settings.json')\ndef main():\n    scripts = [\n        \"python page.py\",\n        \"python page1.py\",\n        \"python page2.py\",\n        \"python page3.py\",\n        \"python page4.py\"\n    ]\n    processes = []",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "load_settings",
        "kind": 2,
        "importPath": "settings",
        "description": "settings",
        "peekOfCode": "def load_settings(json_path=\"settings.json\"):\n    global settings_group\n    if not os.path.exists(json_path):\n        print(f\"Settings file '{json_path}' not found.\")\n        return {}\n    with open(json_path, \"r\", encoding=\"utf-8\") as f:\n        try:\n            settings_group = json.load(f)\n        except json.JSONDecodeError as e:\n            print(f\"Error decoding JSON: {e}\")",
        "detail": "settings",
        "documentation": {}
    }
]